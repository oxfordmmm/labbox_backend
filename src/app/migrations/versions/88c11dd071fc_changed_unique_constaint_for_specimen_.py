"""Changed unique constaint for specimen to include organism

Revision ID: 88c11dd071fc
Revises: 85ef6de80849
Create Date: 2024-08-16 15:02:54.215987

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "88c11dd071fc"
down_revision: Union[str, None] = "85ef6de80849"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Added the organism column to the specimens table
    op.add_column(
        "specimens", sa.Column("organism", sa.String(length=50), nullable=True)
    )
    op.drop_constraint("uq_specimens_accession", "specimens", type_="unique")
    op.create_unique_constraint(
        "ux_specimen",
        "specimens",
        ["accession", "collection_date", "organism"],
        postgresql_nulls_not_distinct=True,
    )
    op.add_column(
        "specimens_version",
        sa.Column("organism", sa.String(length=50), autoincrement=False, nullable=True),
    )

    # add the organism column to the dependent views
    op.execute(
        """
    CREATE OR REPLACE FUNCTION update_flattened_specimen_details_view()
    RETURNS TRIGGER AS $$
    BEGIN
        -- Drop the dependent view first
        DROP VIEW IF EXISTS specimens_view;

        -- Call the function to recreate the flattened view
        PERFORM create_flattened_specimen_details_view();
        
        -- Recreate the dependent view
        CREATE VIEW specimens_view AS
        SELECT specimens.id,
            owners."user",
            owners.site,
            specimens.accession,
            specimens.collection_date,
            specimens.organism,
            specimens.country_sample_taken_code,
            specimens.specimen_type,
            specimens.specimen_qr_code,
            specimens.bar_code,
            details.*
        FROM specimens
            JOIN flattened_specimen_details_view details ON specimens.id = details.specimen_id
            JOIN owners ON specimens.owner_id = owners.id;
            
        RETURN NULL;
    END;
    $$ language 'plpgsql';
    """
    )

    op.execute(
        """
    CREATE OR REPLACE FUNCTION update_flattened_sample_details_view()
    RETURNS TRIGGER AS $$
    BEGIN
        -- Drop the dependent view first
        DROP VIEW IF EXISTS samples_view;
    
        -- Call the function to recreate the flattened view
        PERFORM create_flattened_sample_details_view();
        
        -- Recreate the dependent view
        CREATE VIEW samples_view AS
        select
            samples.id,
            specimens.accession,
            specimens.collection_date,
            specimens.organism,
            runs.code as run_code,
            runs.run_date,
            samples.guid,
            samples.sample_category,
            samples.nucleic_acid_type,
            details.*
        from
            samples
        inner join flattened_sample_details_view as details on samples.id = details.sample_id
        inner join specimens on samples.specimen_id = specimens.id
        inner join runs on samples.run_id = runs.id;
        
        RETURN NULL;
    END;
    $$ language 'plpgsql';
    """
    )

    # Remove the record with code 'organism' from specimen_details_types
    op.execute("DELETE FROM specimen_detail_types WHERE code = 'organism'")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # recreate the dependent views
    op.execute(
        """
    CREATE OR REPLACE FUNCTION update_flattened_specimen_details_view()
    RETURNS TRIGGER AS $$
    BEGIN
        -- Drop the dependent view first
        DROP VIEW IF EXISTS specimens_view;

        -- Call the function to recreate the flattened view
        PERFORM create_flattened_specimen_details_view();
        
        -- Recreate the dependent view
        CREATE VIEW specimens_view AS
        SELECT specimens.id,
            owners."user",
            owners.site,
            specimens.accession,
            specimens.collection_date,
            specimens.country_sample_taken_code,
            specimens.specimen_type,
            specimens.specimen_qr_code,
            specimens.bar_code,
            details.*
        FROM specimens
            JOIN flattened_specimen_details_view details ON specimens.id = details.specimen_id
            JOIN owners ON specimens.owner_id = owners.id;
            
        RETURN NULL;
    END;
    $$ language 'plpgsql';
    """
    )

    op.execute(
        """
    CREATE OR REPLACE FUNCTION update_flattened_sample_details_view()
    RETURNS TRIGGER AS $$
    BEGIN
        -- Drop the dependent view first
        DROP VIEW IF EXISTS samples_view;
    
        -- Call the function to recreate the flattened view
        PERFORM create_flattened_sample_details_view();
        
        -- Recreate the dependent view
        CREATE VIEW samples_view AS
        select
            samples.id,
            specimens.accession,
            specimens.collection_date,
            runs.code as run_code,
            runs.run_date,
            samples.guid,
            samples.sample_category,
            samples.nucleic_acid_type,
            details.*
        from
            samples
        inner join flattened_sample_details_view as details on samples.id = details.sample_id
        inner join specimens on samples.specimen_id = specimens.id
        inner join runs on samples.run_id = runs.id;
        
        RETURN NULL;
    END;
    $$ language 'plpgsql';
    """
    )

    op.execute(
        "INSERT INTO specimen_detail_types (code, description, value_type) VALUES ('organism', 'most descriptive organism name (to species if possible)', 'str')"
    )

    op.drop_column("specimens_version", "organism")
    op.drop_constraint("ux_specimen", "specimens", type_="unique")
    op.create_unique_constraint(
        "uq_specimens_accession", "specimens", ["accession", "collection_date"]
    )
    op.drop_column("specimens", "organism")

    # ### end Alembic commands ###
